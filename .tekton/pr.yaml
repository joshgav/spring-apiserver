apiVersion: tekton.dev/v1beta1
kind: PipelineRun
metadata:
  name: spring-apiserver-pr-pipeline
  namespace: spring-apiserver
  annotations:
    pipelinesascode.tekton.dev/on-target-branch: "[main,tekton]"
    pipelinesascode.tekton.dev/on-event: "pull_request"
    pipelinesascode.tekton.dev/task: "[git-clone,buildah,openshift-client,argocd-task-sync-and-wait]"
    pipelinesascode.tekton.dev/max-keep-runs: "5"
  labels:
    app: spring-apiserver
spec:
  serviceAccountName: pipeline
  params:
  - name: source-repo
    value: "{{ repo_url }}"
  - name: source-branch
    value: "{{ source_branch }}"
  - name: output-image
    value: "quay.aws.joshgav.com/joshgav/spring-apiserver:pr-{{ pull_request_number }}"
    # value: "registry-quay-quay.apps.ipi.aws.joshgav.com/joshgav/spring-apiserver:pr-{{ pull_request_number }}"
    # value: "quay.io/joshgav/spring-apiserver:pr-{{ pull_request_number }}"
  workspaces:
  - name: source-folder
    volumeClaimTemplate:
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: 1Gi
  pipelineSpec:
    params:
    - name: source-repo
      description: source repo that contains the application code
      type: string
    - name: source-branch
      description: source branch to build from
      type: string
    - name: output-image
      description: reference of the image that will get created
      type: string
    workspaces:
    - name: source-folder
    tasks:
    - name: clone-repo
      taskRef:
        resolver: cluster
        params:
        - name: name
          value: git-clone
        - name: namespace
          value: openshift-pipelines
        - name: kind
          value: task
      params:
      - name: URL
        value: "$(params.source-repo)"
      - name: REVISION
        value: "$(params.source-branch)"
      workspaces:
      - name: output
        workspace: source-folder
    - name: build-image
      taskRef:
        resolver: cluster
        params:
        - name: name
          value: buildah
        - name: namespace
          value: openshift-pipelines
        - name: kind
          value: task
      runAfter:
      - clone-repo
      params:
      - name: IMAGE
        value: "$(params.output-image)"
      workspaces:
      - name: source
        workspace: source-folder